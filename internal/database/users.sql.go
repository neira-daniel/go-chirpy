// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, email)
VALUES (
    gen_random_uuid(),
    now() AT TIME ZONE 'UTC',
    now() AT TIME ZONE 'UTC',
    $1
)
RETURNING id, created_at, updated_at, email
`

func (q *Queries) CreateUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
	)
	return i, err
}

const resetDatabase = `-- name: ResetDatabase :exec
DELETE FROM users
`

func (q *Queries) ResetDatabase(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetDatabase)
	return err
}

const saveChirp = `-- name: SaveChirp :one
INSERT INTO chirps (id, created_at, updated_at, body, user_id)
VALUES (
    gen_random_uuid(),
    now() AT TIME ZONE 'UTC',
    now() AT TIME ZONE 'UTC',
    $1,
    $2
)
RETURNING id, created_at, updated_at, body, user_id
`

type SaveChirpParams struct {
	Body   string
	UserID uuid.UUID
}

func (q *Queries) SaveChirp(ctx context.Context, arg SaveChirpParams) (Chirp, error) {
	row := q.db.QueryRowContext(ctx, saveChirp, arg.Body, arg.UserID)
	var i Chirp
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Body,
		&i.UserID,
	)
	return i, err
}
